**Master AI Protocol for Building Typing Practice App**

---

## Objective

This protocol is designed to guide an AI agent or development assistant to programmatically generate the boilerplate and functional modules of a typing practice app modeled after Monkeytype and Mavis Beacon, tailored to specific typing modalities. This file works in tandem with `typing_app_dev_plan`.

---

## Global Constraints

* **Solo developer, no budget**
* **Keyboard-first user experience**
* **No multiplayer**
* **User account support via placeholders**
* **Frontend-first MVP with expandable backend**
* **Deployable using free-tier services only**

---

## Stack Summary (Reference)

* **Frontend:** React (Vite) + Tailwind CSS
* **State:** Zustand or Context API
* **Backend:** Node.js + Express (expandable to Supabase/Postgres)
* **Database:** SQLite (local) â†’ PostgreSQL (production)
* **Deployment:** Netlify/Vercel (frontend), Railway/Render (backend)

---

## Build Sequence

### PHASE 1: Environment Bootstrapping

1. Scaffold Vite + React + Tailwind CSS project
2. Set up folder structure:

   * `/components/`
   * `/hooks/`
   * `/pages/`
   * `/utils/`
   * `/tests/`
   * `/data/` for static JSON
3. Install essential dev tools:

   * ESLint, Prettier, Vitest (optional)

---

### PHASE 2: Typing Engine Core

1. Build `TypingTestEngine` component:

   * Accepts text blocks
   * Handles key events using `onKeyDown`
   * Calculates WPM, accuracy, and error count in real time
   * Displays inline typing feedback (color-coded)
2. Integrate test data loader from static JSON in `/data/`
3. Add lowercase-only typing mode

---

### PHASE 3: Mode Management

1. Create a test selector UI (`ModeSelector` component)
2. Add configuration schema:

   ```ts
   interface TypingMode {
     id: string;
     name: string;
     options: string[];
     contentPath: string;
   }
   ```
3. Add support for:

   * Punctuation and capitalization mode
   * Programming code snippets (JS/Python syntax-sensitive)
   * Simulated table-entry mode (form-like structure, tab key support)

---

### PHASE 4: UI and Layout

1. Build layout system:

   * Header with user dummy profile and stats
   * Typing test section
   * Settings and mode switcher
2. Create mobile and accessibility-friendly layout
3. Ensure no mouse is needed to complete any test

---

### PHASE 5: User & Persistence (Local)

1. Build a dummy login system with localStorage-based JWT
2. Create `/pages/Profile.tsx` to show user stats
3. Save completed test data to localStorage as JSON

---

### PHASE 6: Backend API (Optional Expansion)

1. Scaffold Node.js + Express server
2. Create endpoints:

   * `GET /tests`
   * `POST /submit`
   * `GET /user/history`
3. Use SQLite locally; plan migration to PostgreSQL if persistent hosting becomes required

---

### PHASE 7: Deployment

1. Deploy frontend to Netlify/Vercel
2. Deploy backend (if needed) to Render or Railway
3. Ensure CORS settings and environment variables are handled correctly

---

## Static Assets & Test Content Guidelines

* Typing challenges stored in `/data/*.json`:

  ```json
  {
    "id": "lowercase_basic_1",
    "category": "lowercase",
    "content": "this is a simple typing test for lowercase practice."
  }
  ```
* Code snippets require special handling (e.g. tabs, braces)

---

## AI Agent Rules

* Prioritize keyboard navigation and feedback loops
* Default to dummy data unless persistent storage is explicitly invoked
* Isolate modes in their own reusable components
* Every module must be testable independently
* Reuse core typing logic, change parsing/formatting layer per mode

---

## Completion Criteria

* At least 3 typing modes working
* Test results stored and retrieved locally
* Fully keyboard-navigable UI
* Deployment to free-tier platform completed
* App tested in latest Chrome + Firefox

---

## End of Protocol
